g2 <- ggplot(interval_avg, aes(interval, steps))
g2 + geom_line
interval_avg <- aggregate(steps ~ interval, data = fit_data, mean)
g2 <- ggplot(interval_avg, aes(interval, steps))
g2 + geom_line()
interval_avg <- aggregate(steps ~ interval, data = fit_data, mean)
g2 <- ggplot(interval_avg, aes(interval, steps))
g2 + geom_line() +
ggtitle("Average Steps per 5-minute Interval") +
xlab("5-Minute Interval") +
ylab("Steps")
max(fit_data$interval)
max_activity <- interval_avg$interval[which.max(interval_avg$steps)}
max_activity <- interval_avg$interval[which.max(interval_avg$steps)
max_activity <- interval_avg$interval[which.max(interval_avg$steps))
max_activity <- interval_avg$interval[which.max(interval_avg$steps)]
sum(is.na(fit_data))
head(fit_data$interval)
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
interval_avg <- fit_data %>% group_by(interval) %>% summarize(avgSteps=mean(steps))
g2 <- ggplot(interval_avg, aes(interval, avgSteps))
g2 + geom_line() +
ggtitle("Average Steps per 5-minute Interval") +
xlab("5-Minute Interval") +
ylab("Steps")
knitr::opts_chunk$set(echo = TRUE)
options(digits = 2)
fit_data <- read.csv("activity.csv",  stringsAsFactors = FALSE)
fit_data$date <- as.Date(fit_data$date, "%Y-%m-%d")
step_totals <- aggregate(steps ~ date, data = fit_data, sum)
library(ggplot2)
library(dplyr)
g <- ggplot(step_totals, aes(steps))
g + geom_histogram(stat = "bin", bins = 30) +
ggtitle("Steps Recorded per Day") +
xlab("Number of Steps") +
ylab("Frequency")
mean_steps <- as.integer(mean(step_totals$steps))
median_steps <- as.integer(median(step_totals$steps))
interval_avg <- fit_data %>% group_by(interval) %>% summarize(avgSteps=mean(steps))
g2 <- ggplot(interval_avg, aes(interval, avgSteps))
g2 + geom_line() +
ggtitle("Average Steps per 5-minute Interval") +
xlab("5-Minute Interval") +
ylab("Steps")
max_activity <- interval_avg$interval[which.max(interval_avg$steps)]
missing_data <- sum(is.na(fit_data))
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
interval_avg <- fit_data %>% group_by(interval) %>% summarize(avgSteps=mean(steps))
g2 <- ggplot(interval_avg, aes(interval, avgSteps)
g2 + geom_line() +
interval_avg <- fit_data %>% group_by(interval) %>% summarize(avgSteps=mean(steps))
g2 <- ggplot(interval_avg, aes(interval, avgSteps))
g2 + geom_line() +
ggtitle("Average Steps per 5-minute Interval") +
xlab("5-Minute Interval") +
ylab("Steps")
interval_avg
interval_avg <- fit_data %>% group_by(interval) %>% summarize(steps=mean(steps))
g2 <- ggplot(interval_avg, aes(interval, steps))
g2 + geom_line() +
ggtitle("Average Steps per 5-minute Interval") +
xlab("5-Minute Interval") +
ylab("Steps")
head(fit_data)
fit_data
interval_avg <- na.omit(fit_data) %>% group_by(interval) %>% summarize(steps=mean(steps))
g2 <- ggplot(interval_avg, aes(interval, steps))
g2 + geom_line() +
ggtitle("Average Steps per 5-minute Interval") +
xlab("5-Minute Interval") +
ylab("Steps")
max_activity <- interval_avg$interval[which.max(interval_avg$steps)]
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
1:nrow(completed_data)
class(interval_avg$steps)
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval[i] == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
class(complete_data$date)
class(completed_data$date)
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bar", bins = 30)
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bin", bins = 30)
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
hist(new_dailysteps$steps)
library(ggplot2)
g <- ggplot(step_totals, aes(steps))
g + geom_histogram(stat = "bin") +
ggtitle("Steps Recorded per Day") +
xlab("Number of Steps") +
ylab("Frequency")
library(ggplot2)
g <- ggplot(step_totals, aes(steps))
g + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Steps Recorded per Day") +
xlab("Number of Steps") +
ylab("Frequency")
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Histogram of Steps Recorded per Day") +
xlab("Steps per Day")
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Histogram of Steps Recorded per Day") +
xlab("Steps per Day") +
ylab("Frequency")
completed_data <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps=mean(steps))
class(completed_data$day)
class(completed_data$interval)
head(completed_data)
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval[i] == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Histogram of Steps Recorded per Day") +
xlab("Steps per Day") +
ylab("Frequency")
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps=mean(steps))
g4 <- ggplot(interval, steps, data = daily_avg,
type = "l",
geom = "line",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Steps Recorded, Weekend vs. Weekdays",
facets = day ~ .)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps=mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps),
type = "l",
geom = "line",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Steps Recorded, Weekend vs. Weekdays",
facets = day ~ .)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps=mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps),
type = "l",
geom = "line",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Steps Recorded, Weekend vs. Weekdays",
facets = day ~ .)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- aggregate(day ~ steps, data = completed_data, sum)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- aggregate(day ~ steps, data = completed_data, sum)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps),
type = "l",
geom = "line",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Steps Recorded, Weekend vs. Weekdays",
facets = day ~ .)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps),
type = "l",
geom = "line",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Steps Recorded, Weekend vs. Weekdays",
facets = day ~ .)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps),
type = "l",
geom = "line",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Steps Recorded, Weekend vs. Weekdays",
facets = day ~.)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facets(day ~ .)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(day ~ .)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$day[completed_data %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(day ~ .)
plot(g4)
completed_data
tail(completed_data)
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval[i] == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Histogram of Steps Recorded per Day") +
xlab("Steps per Day") +
ylab("Frequency")
completed_data$day <- weekdays(completed_data$date)
head(completed_data$day)
tail(completed_data$day)
completed_data$daytype <- "weekday"
completed_data$daytype[completed_data %in% c("Saturday, "Sunday")] <- "weekend""
completed_data$daytype[completed_data$day %in% c("Saturday, "Sunday")] <- "weekend"
tail(completed_data$day)
tail(completed_data$daytype)
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(day, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(day ~ .)
plot(g4)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(day ~ .)
plot(g4)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(day ~ .)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(day ~ .)
plot(g4)
completed_data$daytype
tail(completed_data$daytype)
which(completed_data$daytype == "weekend")
daily_avg
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(daytype ~ .)
plot(g4)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(daytype ~ .)
plot(g4)
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(daytype ~ .)
plot(g4)
knitr::opts_chunk$set(echo = TRUE)
options(digits = 2)
fit_data <- read.csv("activity.csv",  stringsAsFactors = FALSE)
fit_data$date <- as.Date(fit_data$date, "%Y-%m-%d")
step_totals <- aggregate(steps ~ date, data = fit_data, sum)
library(ggplot2)
g <- ggplot(step_totals, aes(steps))
g + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Steps Recorded per Day") +
xlab("Number of Steps") +
ylab("Frequency")
mean_steps <- as.integer(mean(step_totals$steps))
median_steps <- as.integer(median(step_totals$steps))
interval_avg <- aggregate(steps ~ interval, data = fit_data, mean)
g2 <- ggplot(interval_avg, aes(interval, steps))
g2 + geom_line() +
ggtitle("Average Steps per 5-minute Interval") +
xlab("5-Minute Interval") +
ylab("Steps")
max_activity <- interval_avg$interval[which.max(interval_avg$steps)]
missing_data <- sum(is.na(fit_data))
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval[i] == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Histogram of Steps Recorded per Day") +
xlab("Steps per Day") +
ylab("Frequency")
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(daytype ~ .)
plot(g4)
completed_data$daytype
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
completed_data$daytype
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval[i] == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
new_dailysteps <- aggregate(steps ~ date, data = completed_data, sum)
g3 <- ggplot(new_dailysteps, aes(steps))
g3 + geom_histogram(stat = "bin", bins = 5) +
ggtitle("Histogram of Steps Recorded per Day") +
xlab("Steps per Day") +
ylab("Frequency")
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$day <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(daytype ~ .)
plot(g4)
## Create a new datatable with the original data incl. missing observations
completed_data <- fit_data
## Using a for loop, check each row for NAs in steps column.
for (i in 1:nrow(completed_data)) {
## If NA is found, determine which interval index corresponds
if (is.na(completed_data$steps[i])) {
index <- which(completed_data$interval[i] == interval_avg$interval)
## Assign the computed average for that interval to complete the dataset.
completed_data$steps[i] <- interval_avg[index,]$steps
}
}
completed_data
completed_data$day <- weekdays(completed_data$date)
completed_data$day
library(dplyr)
completed_data$day <- weekdays(completed_data$date)
completed_data$daytype <- "weekday"
completed_data$daytype[completed_data$day %in% c("Saturday", "Sunday")] <- "weekend"
daily_avg <- completed_data %>% group_by(daytype, interval) %>% summarize(steps = mean(steps))
g4 <- ggplot(data = daily_avg, aes(interval, steps)) +
geom_line() +
xlab("Interval") +
ylab("Average Number of Steps") +
ggtitle("Average Steps Recorded, Weekend vs. Weekdays") +
facet_grid(daytype ~ .)
plot(g4)
knit2html()
